import sys

class TreeNode:

	def __init__(self,key):
		self.val = key
		self.left = None
		self.right = None

	def parse_input(self):
		pass

	def insert_node(self, root):
		if root == None:
			root.val = self.val
			root.left = self.left
			root.right = self.right
		else:
			if root.val > self.val:
				#insert left
				if root.left == None:
					# self.insert_node(root.left, node)
					root.left = self
					# root.left.left = self.left
					# root.left.right = self.right
				else:
					self.insert_node(root.left)
			else:
				#insert right
				if root.right == None:
					# self.insert_node(root.left, node)
					root.right = self
					# root.right.left = self.left
					# root.right.right = self.right
				else:
					self.insert_node(root.right) 
		# pass

	def solve(self, number, root, A=[]):
		
		if root:
			if len(A):
				minimum_val = min([r.val for r in A])
			else:
				minimum_val = sys.maxsize

			if root.val > number:
				val = root.val
				if minimum_val > val:
				   minimum_val = val
				   A.append(root)
				# go to left
				self.solve(number, root.left, A)

			else:
				# go to right
				self.solve(number, root.right, A)
				# print("do nothing")


		# else: 
		if len(A):
			return A[-1:]
		else:
			return None 

if __name__ == "__main__":
	
	a = "865 1060 445 1264 256 754 1165 1294 118 271 520 787 1141 1243 1273 -1 109 181 268 370 514 565 775 847 1105 1150 1210 1261 1267 1282 67 112 163 193 265 -1 298 394 451 517 541 736 760 784 835 1024 1075 1132 1144 1153 1207 1219 1249 -1 -1 1270 1279 1285 10 103 -1 115 133 172 187 232 262 -1 295 340 382 427 448 493 -1 -1 526 547 652 739 757 763 778 -1 796 838 970 1039 1066 1087 1126 1135 -1 1147 -1 1156 1168 -1 1216 1222 1246 1258 -1 -1 1276 -1 -1 1291 4 34 94 106 -1 -1 124 136 166 175 184 190 220 244 259 -1 292 -1 331 352 376 391 400 439 -1 -1 466 499 523 532 544 550 649 733 -1 751 -1 -1 -1 766 -1 781 790 802 -1 841 913 1012 1030 1057 1063 1069 1081 1099 1117 1129 -1 1138 -1 -1 -1 1159 -1 1189 1213 -1 -1 1240 -1 -1 1255 -1 -1 -1 1288 -1 1 7 13 52 91 97 -1 -1 121 130 -1 139 -1 169 -1 178 -1 -1 -1 -1 202 229 241 247 -1 -1 274 -1 328 334 349 367 373 379 388 -1 397 409 436 442 460 472 496 508 -1 -1 529 535 -1 -1 -1 562 583 -1 658 -1 742 -1 -1 769 -1 -1 -1 793 799 805 -1 844 871 964 979 1018 1027 1036 1045 -1 -1 -1 -1 1072 1078 1084 1093 1102 1108 1120 -1 -1 -1 -1 -1 1162 1186 1204 -1 -1 1231 -1 1252 -1 -1 -1 -1 -1 -1 -1 -1 19 49 61 85 -1 -1 100 -1 -1 127 -1 -1 145 -1 -1 -1 -1 196 217 226 -1 238 -1 -1 250 -1 283 316 -1 -1 337 343 -1 361 -1 -1 -1 -1 -1 385 -1 -1 -1 403 424 433 -1 -1 -1 454 463 469 475 -1 -1 505 511 -1 -1 -1 538 559 -1 580 637 655 664 -1 745 -1 772 -1 -1 -1 -1 -1 820 -1 -1 859 880 934 967 973 988 1015 1021 -1 -1 1033 -1 1042 1051 -1 -1 -1 -1 -1 -1 1090 1096 -1 -1 -1 1111 -1 1123 -1 -1 1177 -1 1195 -1 1225 1234 -1 -1 16 25 43 -1 58 64 70 88 -1 -1 -1 -1 142 154 -1 199 211 -1 223 -1 235 -1 -1 253 280 289 307 319 -1 -1 -1 346 358 364 -1 -1 -1 406 421 -1 430 -1 -1 457 -1 -1 -1 -1 -1 478 502 -1 -1 -1 -1 -1 556 -1 577 -1 592 640 -1 -1 661 685 -1 748 -1 -1 808 829 856 862 877 886 919 955 -1 -1 -1 976 985 991 -1 -1 -1 -1 -1 -1 -1 -1 1048 1054 -1 -1 -1 -1 -1 1114 -1 -1 1174 1180 1192 1198 -1 1228 -1 1237 -1 -1 22 28 37 46 55 -1 -1 -1 -1 82 -1 -1 -1 -1 151 160 -1 -1 208 214 -1 -1 -1 -1 -1 -1 277 -1 286 -1 301 310 -1 325 -1 -1 355 -1 -1 -1 -1 -1 415 -1 -1 -1 -1 -1 -1 484 -1 -1 553 -1 571 -1 589 628 -1 643 -1 -1 679 715 -1 -1 -1 811 823 832 853 -1 -1 865 874 -1 883 892 916 925 943 961 -1 -1 982 -1 -1 997 -1 -1 -1 -1 -1 -1 1171 -1 -1 1183 -1 -1 -1 1201 -1 -1 -1 -1 -1 -1 -1 31 -1 40 -1 -1 -1 -1 79 -1 148 -1 157 -1 205 -1 -1 -1 -1 -1 -1 -1 -1 304 -1 313 322 -1 -1 -1 412 418 481 487 -1 -1 568 574 586 -1 601 634 -1 646 667 682 712 727 -1 817 -1 826 -1 -1 850 -1 -1 868 -1 -1 -1 -1 889 910 -1 -1 922 928 940 949 958 -1 -1 -1 994 1000 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 73 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 490 -1 -1 -1 -1 -1 -1 598 604 631 -1 -1 -1 -1 676 -1 -1 697 -1 724 730 814 -1 -1 -1 -1 -1 -1 -1 -1 -1 907 -1 -1 -1 -1 931 937 -1 946 952 -1 -1 -1 -1 -1 1006 -1 76 -1 -1 595 -1 -1 619 -1 -1 673 -1 688 709 721 -1 -1 -1 -1 -1 898 -1 -1 -1 -1 -1 -1 -1 -1 -1 1003 1009 -1 -1 -1 -1 607 622 670 -1 -1 694 703 -1 718 -1 895 904 -1 -1 -1 -1 -1 610 -1 625 -1 -1 691 -1 700 706 -1 -1 -1 -1 901 -1 -1 613 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 616 -1 -1"
	b = "1072"
	
	TreeNode(98).insert_node(r)
	TreeNode(102).insert_node(r)
	TreeNode(96).insert_node(r)
	TreeNode(99).insert_node(r)
	TreeNode(97).insert_node(r)
	a = r.solve(97, r)[0]
	pass